#include <iostream>
#include <vector>

using namespace std;

void test () {
    vector<vector<int>> mat =
    {{7,53,183,439,863},
     {497,383,563,79,973},
     {287,63,343,169,583},
     {627,343,773,959,943},
     {767,473,103,699,303}};

}

int maxs = 0;
int maxrow[16] = {0}, remain[16];

int search (int row, int visit, int sum, const vector<vector<int>> &mat, int best = 0) {

    if (row == mat.size()) {
        maxs = max (maxs,sum);
        // cout << sum << ' ';
        return sum;
    }

    if (remain[row] + sum < best) return 0;

    for (int i = 0; i < mat.size(); i++) {
        if ((visit >> i&1) == 0) {

            int curr = search (row + 1, visit | 1 << i, sum + mat[row][i], mat, best);

            if (best < curr) {
                best = curr;
            }
        }
    }

    return best;
}

int main () {
    // problem 345 : matrix sum

    vector<vector<int>> mat =
    {{7,53,183,439,863,497,383,563,79,973,287,63,343,169,583},
      {627,343,773,959,943,767,473,103,699,303,957,703,583,639,913},
      {447,283,463,29,23,487,463,993,119,883,327,493,423,159,743},
      {217,623,3,399,853,407,103,983,89,463,290,516,212,462,350},
      {960,376,682,962,300,780,486,502,912,800,250,346,172,812,350},
      {870,456,192,162,593,473,915,45,989,873,823,965,425,329,803},
      {973,965,905,919,133,673,665,235,509,613,673,815,165,992,326},
      {322,148,972,962,286,255,941,541,265,323,925,281,601,95,973},
      {445,721,11,525,473,65,511,164,138,672,18,428,154,448,848},
      {414,456,310,312,798,104,566,520,302,248,694,976,430,392,198},
      {184,829,373,181,631,101,969,613,840,740,778,458,284,760,390},
      {821,461,843,513,17,901,711,993,293,157,274,94,192,156,574},
      {34,124,4,878,450,476,712,914,838,669,875,299,823,329,699},
      {815,559,813,459,522,788,168,586,966,232,308,833,251,631,107},
      {813,883,451,509,615,77,281,613,459,205,380,274,302,35,805}};

    // mat = {{7,53,183,439,863}, {497,383,563,79,973}, {287,63,343,169,583}, {627,343,773,959,943}, {767,473,103,699,303}};

    int size = mat.size();
    int visit = 0;


    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        maxrow[i] = max (mat[i][j], maxrow[i]);
        // minrow[i] = min (mat[i][j], minrow[i]);
      }
      // maxsum += maxrow[i];
      // cout << maxrow[i] << " ";
    }

    remain[size - 1] = maxrow[size - 1];

    for (int i = size-1; i > 0; i--) {
        remain[i - 1] = remain[i] + maxrow[i - 1];
    }

    search (0,0,0,mat);

    cout << maxs;

    /*
    cout << maxsum << "\n";

    */

}
