#include <iostream>
#include <vector>
#include <cmath>
#include <limits>
#include <map>

#include <iomanip>

using namespace std;
/*
    "Dot" – 1 time unit long.
    "Dash" – 3 time units long.
    "pause" - 7 time units long.

    Pause between dots and dashes in a character – is 1 time unit long.
    Pause between characters inside a word – is 3 time units long.
    Pause between words – is 7 time units long.
*/
/////////////////////////////////Assert/////////////////////////////////////////
class Assert {
    public :
        static void That (const string &a, const string &b) {
            if (a != b) {
                cout << "actual : " << a << " expected : " << b;
                cout << endl;
            }
        }
};
string Equals (const string &entry) { return entry;}
void Test ();
////////////////////////////////////////////////////////////////////////////////
map<string, string> morse_code =
{{".-", "A"},{"-...", "B"},{"-.-.", "C"},{"-..", "D"},{".", "E"},{"..-.", "F"},
{"--.", "G"},{"....", "H"},{"..", "I"},{".---", "J"},{"-.-", "K"},{".-..", "L"},{"--", "M"},
{"-.", "N"},{"---", "O"},{".--.", "P"},{"--.-", "Q"},{".-.", "R"},{"...", "S"},{"-", "T"},
{"..-", "U"},{"...-", "V"},{".--", "W"},{"-..-", "X"},{"-.--", "Y"},{"--..", "Z"},{"-----", "0"},

{".----", "1"},{"..---", "2"},{"...--", "3"},{"....-", "4"},{".....", "5"},{"-....", "6"},
{"--...", "7"},{"---..", "8"},{"----.", "9"},

{".-.-.-", "."},{"--..--",","},{"..--..","?"},{".----.","'"},{"-.-.--","!"},{"-..-.","/"},
{"-.--.","("},{"-.--.-",")"},{".-...","&"},{"---...",":"},{"-.-.-.",";"},{"-...-","="},
{".-.-.","+"},{"-....-","-"},{"..--.-","_"},{"...-..-","$"},{".--.-.","@"}};

class Point {
    public :
        double x, y;

        Point () { x = 0, y = 0;}
        Point (double a) {x = a, y = 0;};
        Point (double a, double b) { x = a, y = b;}
        double distance (Point p) { return hypot (p.x - x, p.y - y); }
};
class Kmeans {
    private :
        static bool is_equal (Point a, Point b) { return a.x == b.x && a.y == b.y;}
        static Point nearest_point (const vector<Point> &grph, Point p) {
            Point nearest;
            double min = numeric_limits<double>::infinity(), dist;

            for (auto &star : grph) {
                dist = p.distance (star);

                if (dist < min) {
                    min = dist;
                    nearest = star;
                }
            }

            return nearest;
        }
    public :
        static vector<Point> clust (const vector<Point> &galaxy, vector<Point> ctid) {

            Point near;
            //bool done = true;
          //  while (done) {
                vector<Point> tmp = ctid;
                map<double, double> npoints, sumX, sumY;
                //done = false;
                for (auto &p : galaxy) {
                    near = nearest_point (ctid, p);
                    for (size_t i = 0; i < ctid.size(); ++i)
                        if (is_equal (ctid[i], near)) {
                            npoints[i]++;
                            sumX[i] += p.x;
                            sumY[i] += p.y;
                        }
                }
                for (size_t i = 0; i < ctid.size(); ++i) {
                    ctid[i].x = sumX[i] / npoints[i];
                    ctid[i].y = sumY[i] / npoints[i];
                //    if (!is_equal (ctid[i], tmp[i])) done = true;
                }
            //}
            return ctid;
        }
};

class Debug {
    public :
        static void display_map (map<double,double> points) {
            for (auto &it : points)
              cout << '[' << it.first << ',' << it.second << ']' <<  endl;
            cout << endl;
        }
        static void display_pt (Point p) {
            cout << setw(2) << fixed << setprecision(2) ;
            cout << '[' << p.x << ", " << p.y << ']';
            cout << endl;
        }
        static void display_vect (vector<Point> points) {
            for (auto &it : points) {
                display_pt (it);
            }
            cout << endl;
        }
};

string clean (string src) {
    unsigned long first = src.find_first_of ('1');
    unsigned long last = src.find_last_of('1') + 1;
    return (first != string::npos)? src.substr(first, last - first) : "";
}
int skip (string::iterator &it) {
    int ref = *it, size = 0;
    while (*it == ref) {
      size++, it++;
    }

    return size;
}

vector<Point> mk_seeds (vector<Point> grph, int mode) {
    double size = grph.size() / static_cast<double> (7);
    if (size == 0) return {};
    double mid = round (grph[0].x * 3 * size);

    vector<Point> V {grph[0]};

    if (mode > 2) V.push_back (mid);
    V.push_back (grph.back());

    return V;
}
vector<double> mk_unit (string src) {

    map<double,double> mapo, mapz;
    vector<Point> ones, zero;

    vector<double> unit (3);
    int nunits, size;
    string::iterator it = src.begin();

    while (it != src.end()) {
        char bit = *it;
        size = skip (it);

        if (bit == '1') mapo[size]++;
        if (bit == '0') mapz[size]++;
    }

    for (auto &it : mapo) ones.push_back ({it.first,it.second});
    for (auto &it : mapz) zero.push_back ({it.first,it.second});

    if (zero.size() == 0) zero = ones;

    nunits = min (static_cast<int> (ones.size()), 2);
    ones = Kmeans::clust (ones, mk_seeds (ones, nunits));

    nunits = min (static_cast<int> (zero.size()), 3);
    zero = Kmeans::clust (zero, mk_seeds (zero, nunits));

    unit[0] = min (ones.front().x, zero.front().x);
    unit[1] = (ones.back().x + zero[1].x) * 0.5;
    unit[2] = max (ones.back().x, zero.back().x);

    if (nunits == 1) {
        if (unit[2] >= unit[0] * 6)
            unit[1] = unit[2] * 0.5;
        else
            unit[1] = max (ones.back().x, zero.back().x);
    }

    return unit;
}

int getop (int length, vector<double> &units) {
    if (abs (length - units[0]) <= abs (length - units[1])) return 0;
    if (abs (length - units[2]) < abs (length - units[1])) return 2;
    return 1;
}
string decodeMorse (string morseCode) {

    istringstream iss(morseCode);
    string tok, os;

    while (iss >> tok) {
        os += morse_code[tok];
        if (iss.get() == ' ' && iss.get() == ' ')
            os += ' ';
        else
            iss.unget();
    }
    os.erase(os.find_last_not_of(' ')+1);

    return os;
}
string decodeBitsAdvanced (const char *bits) {

  string code = clean (bits), morse;
  if (code.size() == 0) return morse;

  string::iterator it = code.begin();
  vector<double> rate = mk_unit (code);

  while (it != code.end()) {
      int bit = *it, opt = getop (skip (it), rate);

      switch (opt) {
          case 0 : if (bit == '1') morse += "." ; break;
          case 1 : if (bit == '1') morse += "-" ; else morse += " " ; break;
          case 2 : if (bit == '0') morse += "  "; break;
          default: ; break;
      }
  }

  return morse;
}

int main () {

  const char *trembling

  cout << decodeMorse(decodeBitsAdvanced(trembling));

}

void Test () {

  /*
cout << decodeMorse(decodeBitsAdvanced("1")) << endl;
cout << decodeMorse(decodeBitsAdvanced("101")) << endl;
cout << decodeMorse(decodeBitsAdvanced("1001")) << endl;
cout << decodeMorse(decodeBitsAdvanced("10001")) << endl;
cout << decodeMorse(decodeBitsAdvanced("100001")) << endl;
cout << decodeMorse(decodeBitsAdvanced("10000001")) << endl;

// Operator_is_nervous_his_hand_is_shaking_Figure_out_what_his_message_is
const char *trembling
decodeMorse(decodeBitsAdvanced(trembling));
*/


  Assert::That(decodeMorse(decodeBitsAdvanced("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000")), "HEY JUDE");

//public void testShortMessages() {
  Assert::That(decodeMorse(decodeBitsAdvanced("")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("0")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("000000000000000000000000000000000000000000")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("1")), "E");
  Assert::That(decodeMorse(decodeBitsAdvanced("")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("0")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("000000000000000000000000000000000000000000")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("1")), "E");

  //public void testMultipleBitsPerDot() {
  Assert::That(decodeMorse(decodeBitsAdvanced("111")), "E");
  Assert::That(decodeMorse(decodeBitsAdvanced("1111111")), "E");
  Assert::That(decodeMorse(decodeBitsAdvanced("110011")), "I");
  Assert::That(decodeMorse(decodeBitsAdvanced("111110000011111")), "I");
  Assert::That(decodeMorse(decodeBitsAdvanced("11111100111111")), "M"); // =>

  //public void testExtraZeros() {
  Assert::That(decodeMorse(decodeBitsAdvanced("01110")), "E");
  Assert::That(decodeMorse(decodeBitsAdvanced("000000011100000")), "E");

  //public void testEmptyMessage() {
  Assert::That(decodeMorse(decodeBitsAdvanced("")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("0")), "");
  Assert::That(decodeMorse(decodeBitsAdvanced("0000000000")), "");

//public void testLongMessage() {
  Assert::That(decodeMorse(decodeBitsAdvanced("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011")), "HEY JUDE");
Assert::That(decodeMorse(decodeBitsAdvanced


/*
Assert::That(decodeMorse(decodeBitsAdvanced


  char *source;
  source = "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011";
  //cout << decodeMorse(decodeBitsAdvanced (source)) << endl;

  source = "0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000";
  cout << decodeMorse(decodeBitsAdvanced (source)) << endl;

  source =

  cout << decodeMorse(decodeBitsAdvanced (source)) << endl;

  source = "1";
  cout << decodeMorse(decodeBitsAdvanced (source)) << endl;

  source = "10000001";
  cout << decodeMorse(decodeBitsAdvanced (source)) << endl;

  */

}
///////////////////////////////Arkive///////////////////////////////////////////
int unit (const string &src) {
  int minval = 999;
  string signal = src;
  string::iterator it = signal.begin();

  while (it != signal.end())
      minval = min (skip (it), minval);

  return minval;
};
string decodeBits (string bits) {

    string morse;
    string::iterator it = bits.begin();
    const int rate = unit (clean (bits));

    while (it != bits.end()) {
        int bit = *it, len = skip (it);

        switch (len / rate) {
            case 1 : if (bit == '1') morse += "." ; break;
            case 3 : if (bit == '1') morse += "-" ; else morse += " " ; break;
            case 7 : if (bit == '0') morse += "  "; break;
            default: ; break;
        }
    }

    return morse;
}
