use preloaded::{ChemResult, ChemError, Element::{self, *}};
use std::collections::HashMap;

const DATA: &[(Element,(&str, usize, f32))] =
&[(H,("H",1,1.0)),(B,("B",3,10.8)),(C,("C",4,12.0)),(N,("N",3,14.0)),(O,("O",2,16.0)),(F,("F",1,19.0)),(Mg,("Mg",2,24.3)),(P,("P",3,31.0)),(S,("S",2,32.1)),(Cl,("Cl",1,35.5)),(Br,("Br",1,80.0))] ;

fn mass (atom: Element) -> f32 { DATA.iter().find(|x| x.0 == atom).unwrap().1.2 }
fn valence (atom: Element) -> usize { DATA.iter().find(|x| x.0 == atom).unwrap().1.1 }
fn symbol (atom: Element) -> String { DATA.iter().find(|x| x.0 == atom).unwrap().1.0.to_string() }
fn comp (atom:&Atom) -> usize { if atom.element == H { std::usize::MAX } else { atom.id } }

#[derive(Hash, Clone, Debug)]
pub struct Atom {
    pub id:usize,
    pub element:Element,
    edge:Vec<Atom>,
}

impl Eq for Atom {}

impl PartialEq for Atom {
    fn eq(&self, other: &Self) -> bool { self.id == other.id }
}
impl std::fmt::Display for Atom {
    fn fmt(&self, _f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut os = format!("Atom({}.{}", symbol(self.element), self.id);

        if self.edge.len() > 0 {
            os += &": ";

            for ed in &self.edge {
                if ed.element == H {
                    os += &format!("H,");
                } else {
                    os += &format!("{}{},", symbol(ed.element), ed.id);
                }
            }
            if self.edge.len() > 0 { os.pop(); }
        }
        os += &")";
        write!(_f, "{}", os)
    }
}

#[derive(Debug)]
struct Molecule {
    id: String,
    index: Vec<Vec<usize>>,
    atoms: Vec<Atom>,
    lock: bool,
}

impl From<&'static str> for Molecule {
    fn from(_value: &'static str) -> Self {
        Molecule {
            id: format!("{_value}"),
            index:vec![vec![]],
            atoms: vec![Atom{id:0, element:C,edge: vec![]}],
            lock:false,
        }
    }
}
impl Molecule {
    fn default() -> Molecule {
        Molecule {
            id: format!(""),
            index:vec![vec![]],
            atoms: vec![Atom{id:0, element:C,edge: vec![]}],
            lock:false,
        }

    }
    fn checkvalence(&self, index:usize) -> bool {
        return self.atoms[index].edge.len() < valence(self.atoms[index].element)
    }
    fn sortedge(&mut self, index: usize) {
        self.atoms[index].edge.sort_by(|a,b| a.id.cmp(&b.id));
        self.atoms[index].edge.sort_by( |a,b| if a.element != H && b.element != H { a.element.cmp(&b.element) } else { comp(a).cmp(&(comp(b))) });
    }
    fn link(&mut self, c1: usize, c2: usize) {
        let at1 = self.atoms[c1].clone();
        let at2 = self.atoms[c2].clone();

        self.atoms[c1].edge.push(at2);
        self.atoms[c2].edge.push(at1);

        self.sortedge(c1);
        self.sortedge(c2);
    }
    fn inside(&self, nc:usize, nb:usize) -> bool { 
        return nb < self.index.len() && nc < self.index[nb].len() 
    }

    pub fn branch(&mut self, _bs: &[usize]) -> ChemResult<&mut Self> {
        // add new branches with x carbon to the molecule
        if self.lock == true { return Err(ChemError::LockedMolecule) }

        for &ncarb in _bs {
            let mut arm = vec![0];

            for _ in 0..ncarb {
                let nb = self.atoms.len();
                self.atoms.push(Atom { id:nb, element:C, edge: vec![] });
                arm.push(nb);
            }

            for i in 2..=ncarb {
                self.link(arm[i-1], arm[i-0]);
            }

            self.index.push(arm);
        }

        Ok(self)
    }
    pub fn bond(&mut self, _poses: &[(usize, usize, usize, usize)]) -> ChemResult<&mut Self> {
        //(&mut m).bond(&[(c1, b1, c2, b2), ...])
        //creates new bonds between two atoms of existing branches : bond c1 of b1 with c2 of b2
        if self.lock == true { return Err(ChemError::LockedMolecule) }

        for &(c1,b1,c2,b2) in _poses {
            if self.inside(c1,b1) && self.inside(c2,b2) {
                let a1 = self.index[b1][c1];
                let a2 = self.index[b2][c2];

                if a1 == a2 { return Err(ChemError::InvalidBond) } // invalidate self bonding
                if !self.checkvalence(a1) || !self.checkvalence(a2) { return Err(ChemError::InvalidBond) }
                self.link(a1,a2);
            } else {
                 return Err(ChemError::InvalidBond) 
            }
        }

        Ok(self)
    }
    pub fn mutate(&mut self, _ms: &[(usize, usize, Element)]) -> ChemResult<&mut Self> {
        // (&mut m).mutate(&[(nc, nb, elt), ...])
        //mutate the carbon nc in the branch nb into the chemeical element elt
        if self.lock == true { return Err(ChemError::LockedMolecule) }

        for &(nc, nb, elt) in _ms {
            if !self.inside(nc,nb) { return Err(ChemError::InvalidBond) }

            let it = self.index[nb][nc];
            let mut curr = self.atoms[it].clone();

            if curr.edge.len() <= valence(elt) {
                curr.element = elt;

                for edge in &curr.edge {
                    let nid = edge.id;

                    self.atoms[nid].edge.iter_mut().for_each (
                        |link| if link.id == curr.id {
                            link.element = elt
                        }
                    );
                    self.sortedge(nid);
                }
            } else {
                return Err(ChemError::InvalidBond)
            }

            self.atoms[it] = curr;
        }

        Ok(self)
    }
    pub fn add(&mut self, _els: &[(usize, usize, Element)]) -> ChemResult<&mut Self> {
        // add a new atom of kind elt on the carbon nc in the branch nb
        if self.lock == true { return Err(ChemError::LockedMolecule) }

        for &(nc, nb, elt) in _els {
            if !self.inside(nc,nb) { return Err(ChemError::InvalidBond) }

            let i1 = self.index[nb][nc];
            let i2 = self.atoms.len();
            let curr = self.atoms[i1].clone();

            if curr.edge.len() < valence(curr.element) {
                self.atoms.push(Atom {id: i2, element: elt, edge:vec![]});
                self.link(i1,i2);
            } else {
                return Err(ChemError::InvalidBond);
            }
        }

        //print!("\n{:?} {:?}\n", self.index, self.formula());
        Ok(self)
    }
    pub fn add_chain(&mut self, nc: usize, nb: usize, _els: &[Element]) -> ChemResult<&mut Self> {
        //adds on the carbon nc in the branch nb a chain with all the provided elements

        let check = (0.._els.len()) .map(|x| valence(_els[x]) as i32 - if x < _els.len() - 1 { 2 } else { 1 }).collect::<Vec<i32>>(); // check for monovalent atom

        if self.lock == true { return Err(ChemError::LockedMolecule) }
        if !self.inside(nc, nb) { return Err(ChemError::InvalidBond) }
        if !self.checkvalence(self.index[nb][nc]) { return Err(ChemError::InvalidBond) }
        if check.iter().find(|&x| *x < 0).is_some() { return Err(ChemError::InvalidBond) }

        let mut chain:Vec<usize> = Vec::new();

        for &elt in _els {
            let id = self.atoms.len();
            self.atoms.push(Atom {id: id, element:elt , edge: vec![]});
            chain.push(id);
        }
        
        for i in 1..chain.len() {
            self.link(chain[i-0], chain[i-1]);
        }

        self.link(self.index[nb][nc], chain[0]);

        Ok(self)
    }
    pub fn close(&mut self) -> ChemResult<&mut Self> {

        if self.lock == true { return Err(ChemError::LockedMolecule) }
        self.lock = true;

        for i in 1..self.atoms.len() {
            let mut atom = self.atoms[i].clone();
            let size = valence (atom.element) as i32 - atom.edge.len() as i32;

            if size < 0 {
                return Err(ChemError::InvalidBond);
            } else {
                for _ in 0..size {
                    let hydrogen = Atom {id: self.atoms.len(), element:H, edge:vec![atom.clone()]};
                    atom.edge.push(hydrogen.clone());
                    self.atoms.push(hydrogen);
                }
            }

            self.atoms[i] = atom;
        }

        Ok(self)
    }
    pub fn unlock(&mut self) -> ChemResult<&mut Self> {

        if self.lock == false { return Err(ChemError::UnlockedMolecule) }
        let atoms = self.atoms.clone();

        self.lock = false;

        self.index.iter_mut().for_each(|arm| arm.retain(|x| atoms[*x].element != H));
        self.index.retain(|x| x.len() != 1);

        self.atoms.retain(|atom| atom.element != H);
        self.atoms.iter_mut().for_each(|atom| atom.edge.retain(|edge| edge.element != H));

        (0..self.atoms.len()).for_each(|lv| {
            let curr = self.atoms[lv].clone();

            if curr.id != lv {
                self.atoms[lv].id = lv;
                self.index.iter_mut().for_each( |x| { x.into_iter().filter(|x| *x == &curr.id).for_each(|x| *x = lv) });
                self.atoms.iter_mut().for_each( |atom| atom.edge.iter_mut().for_each ( |edge| if edge.id == curr.id { edge.id = lv }));
            }

        });

        match self.atoms.len() {
            1 => Err(ChemError::EmptyMolecule),
            _ => Ok(self),
        }
    }

    pub fn name(&self) -> &str { &self.id }
    pub fn formula(&self) -> ChemResult<String> {
        if self.atoms.len() == 1 { return Err(ChemError::EmptyMolecule); }
        if self.lock == false { return Err(ChemError::UnlockedMolecule); }

        let mut freq:HashMap<Element, usize> = HashMap::new();

        for i in 1..self.atoms.len() {
            let atom = &self.atoms[i];
            *freq.entry(atom.element).or_insert(0) += 1;
        }

        let mut freq = freq.iter().collect::<Vec<_>>();
        freq.sort_by(|a,b| a.0.cmp(b.0));

        Ok(freq.iter().map(|atom| if atom.1 > &1 { format!("{}{}", symbol(*atom.0), atom.1) } else { format!("{}", symbol(*atom.0)) }).collect::<String>())
    }
    pub fn molecular_weight(&self) -> ChemResult<f32> {
        if self.atoms.len() == 1 { return Err(ChemError::EmptyMolecule); }
        if self.lock == false { return Err(ChemError::UnlockedMolecule); }

        let sum = (1..self.atoms.len()).fold(0.0, |sum, x| sum + mass(self.atoms[x].element) );

        Ok(sum)
    }
    pub fn atoms(&self) -> Vec<&Atom> {
        (1..self.atoms.len()).map(|x| &self.atoms[x]).collect::<Vec<_>>()
    }
}

