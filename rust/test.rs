
#![allow(dead_code, unused)]


fn encode(text: &str) -> String {

    text.chars().map(|x| format!("{:08b}", x as u8).chars().map(|x| format!("{x}{x}{x}")).collect::<String>()).collect::<String>()
}

fn decode(bits: &str) -> String {
    let bits = bits.chars().collect::<Vec<_>>();
    let mut res = String::new();
    let mut bin = String::new();

    for i in (0..bits.len()).step_by(3) {
        if &bits[i..(i+3)].iter().filter(|x| *x == &'1').collect::<Vec<_>>().len() < &2 {
            bin.push('0');
        } else {
            bin.push('1');
        }

        if i % 24 == 21 {
            res.push( u8::from_str_radix(&bin, 2).unwrap() as char);
            bin.clear();
        }
    }

    res
}

fn main() {

    let word =  "T3st"; //"000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000");
    let binary = "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000";

    assert_eq!(encode("hey"), "000111111000111000000000000111111000000111000111000111111111111000000111");
    assert_eq!(encode("T3st"), "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000");

       assert_eq!(encode("The Sensei told me that i can do this kata"), "000111000111000111000000000111111000111000000000000111111000000111000111000000111000000000000000000111000111000000111111000111111000000111000111000111111000111111111000000111111111000000111111000111111000000111000111000111111000111000000111000000111000000000000000000111111111000111000000000111111000111111111111000111111000111111000000000111111000000111000000000000111000000000000000000111111000111111000111000111111000000111000111000000111000000000000000000111111111000111000000000111111000111000000000000111111000000000000111000111111111000111000000000000111000000000000000000111111000111000000111000000111000000000000000000111111000000000111111000111111000000000000111000111111000111111111000000000111000000000000000000111111000000111000000000111111000111111111111000000111000000000000000000111111111000111000000000111111000111000000000000111111000111000000111000111111111000000111111000000111000000000000000000111111000111000111111000111111000000000000111000111111111000111000000000111111000000000000111");
       assert_eq!(encode("T?st!%"), "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111");

    assert_eq!(decode("100111111000111001000010000111111000000111001111000111110110111000010111"), "hey");

    /*
    assert_eq!(decodehe Sensei told me that i can do this kata");

    assert_eq!(decode("000111000111000111000010000000111111000000111111000111111111000000111111000111111111000111010000"), "T3st");

    assert_eq!(decode("000111000111000111000001000000111111110111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"), "T?st!%");
*/

}
