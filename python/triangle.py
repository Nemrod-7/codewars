
def lucas3 ( n,  k) :

    prod = 1 #  => lucas (n k) = prod from i = 0 to infinity (binom(n_i k_i) mod p)

    while n > 0 or k > 0 :
        np, kp = n % 3, k % 3
        if np < kp : return 0
        if np == 2 and kp == 1 : prod *= 2 # prod *= binomial (np, kp);
        n //= 3
        k //= 3


    # print(np, kp, prod, ' ', end='')
    return prod % 3

def triangle (row) :
    N = len(row) - 1
    sum, sign = 0, (-1) ** N
    colors = ['B','R','G']

    for k in range(0, len(row)) :
        sum += lucas3 (N, k) * ord( row[k]) % 3

    print(sum)
    return colors[(sign * sum) % 3]

basic_cases = [
        ['B', 'B'],
        ['GB', 'R'],
        ['RRR', 'R'],
        ['RGBG', 'B'],
        ['RBRGBRB', 'G'],
        ['RBRGBRBGGRRRBGBBBGG', 'G']
        ]


large = 'BBGBGGRRBRGGRRRGBGGBRRGBRGRGGRRGBBRBGRGGRGRBBGBBRRBBBGBGGGBRGRBBGBBBRRBRBGBGBGGBRRGBRGRBGRRRRBBBRBBBRBBGRRRRGBBRGBRBGRBRRRBBRBBGBGRRBGBGBBBGRRBRGGRGRBBBGGGGGRRBRRGBRGRBRRRBRGBRRGBRGRRGBBBGBRBRRRGGBGRGGBGBGRBBGRRGRGGGGBBGBGBBBGBBBRGGRRGRRRBBRRBGBRGBGBBGGRBBRGRGRGGRRRGBBRGGGGGBGBBGGBGRBBBRGBGRRRRRBBBRGRGBGBGBRRBRBRRGBRRGGGBBRRBGBBGGBBGGGGRRGGRRRBRRBBGGGGGBRBRRRGBRGBGGRRBRRRRGGRRRRRGGBRGRGRRRBRRBBGBBBGGBRGBGRBRBRRGBRGGBRBGBRGGGGRGGRRBGBBRBRGRRBRRGRBRRGRBRBBBBGRRRRRRBBBRBBBBGGGBBGGRGBGBGGBGRGBBBBRRBRGRGGGGRGBBGBBGGBGBRBBGRRGRGBRGBRGGRRGGGGBRGBRBGGBRGGRGBBRRRGGRRRBBBGRBRGGRGGBRGGRBGBBRGRGGBRGBRBGBBGBRGRGRBBBGRRRGRBBBRGRRRBBRBGRGRBRBBBGGGBRRBGBRBRGRBGRRBRBBBBBGRBBRBRBRRBGBGRBGRBGBRRGGBBGGGBBBBGRBRRRBRRRRBRGGRRRBRBGBBBGGBRGGRBBBBRRGRGRRRBBBRRGGBGBRBBBBBBGBRRBGBRGRGBGGBRRGGBBRGGBGRBRBBBGBBRBBRRRRBBRRGGRGRRBBRBGRRBBBBGGRRRBGGGBRRGRGRBGBRBBRRRRBBRGBGRGBRBGRGRGRBRBRBBRGGBGBRRRGRBBRBBGBBGBBBBGGBGGGRRBGBRGRRGRRRRRBGBGGRGRRG' 
# G

triangle(large)
# for test in basic_cases :
#     triangle(test[0])

