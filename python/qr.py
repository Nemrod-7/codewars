
alphaTable = [
    0x00, 0x00, 0x01, 0x19, 0x02, 0x32, 0x1a, 0xc6, 0x03, 0xdf, 0x33, 0xee, 0x1b, 0x68, 0xc7, 0x4b,
    0x04, 0x64, 0xe0, 0x0e, 0x34, 0x8d, 0xef, 0x81, 0x1c, 0xc1, 0x69, 0xf8, 0xc8, 0x08, 0x4c, 0x71,
    0x05, 0x8a, 0x65, 0x2f, 0xe1, 0x24, 0x0f, 0x21, 0x35, 0x93, 0x8e, 0xda, 0xf0, 0x12, 0x82, 0x45,
    0x1d, 0xb5, 0xc2, 0x7d, 0x6a, 0x27, 0xf9, 0xb9, 0xc9, 0x9a, 0x09, 0x78, 0x4d, 0xe4, 0x72, 0xa6,
    0x06, 0xbf, 0x8b, 0x62, 0x66, 0xdd, 0x30, 0xfd, 0xe2, 0x98, 0x25, 0xb3, 0x10, 0x91, 0x22, 0x88,
    0x36, 0xd0, 0x94, 0xce, 0x8f, 0x96, 0xdb, 0xbd, 0xf1, 0xd2, 0x13, 0x5c, 0x83, 0x38, 0x46, 0x40,
    0x1e, 0x42, 0xb6, 0xa3, 0xc3, 0x48, 0x7e, 0x6e, 0x6b, 0x3a, 0x28, 0x54, 0xfa, 0x85, 0xba, 0x3d,
    0xca, 0x5e, 0x9b, 0x9f, 0x0a, 0x15, 0x79, 0x2b, 0x4e, 0xd4, 0xe5, 0xac, 0x73, 0xf3, 0xa7, 0x57,
    0x07, 0x70, 0xc0, 0xf7, 0x8c, 0x80, 0x63, 0x0d, 0x67, 0x4a, 0xde, 0xed, 0x31, 0xc5, 0xfe, 0x18,
    0xe3, 0xa5, 0x99, 0x77, 0x26, 0xb8, 0xb4, 0x7c, 0x11, 0x44, 0x92, 0xd9, 0x23, 0x20, 0x89, 0x2e,
    0x37, 0x3f, 0xd1, 0x5b, 0x95, 0xbc, 0xcf, 0xcd, 0x90, 0x87, 0x97, 0xb2, 0xdc, 0xfc, 0xbe, 0x61,
    0xf2, 0x56, 0xd3, 0xab, 0x14, 0x2a, 0x5d, 0x9e, 0x84, 0x3c, 0x39, 0x53, 0x47, 0x6d, 0x41, 0xa2,
    0x1f, 0x2d, 0x43, 0xd8, 0xb7, 0x7b, 0xa4, 0x76, 0xc4, 0x17, 0x49, 0xec, 0x7f, 0x0c, 0x6f, 0xf6,
    0x6c, 0xa1, 0x3b, 0x52, 0x29, 0x9d, 0x55, 0xaa, 0xfb, 0x60, 0x86, 0xb1, 0xbb, 0xcc, 0x3e, 0x5a,
    0xcb, 0x59, 0x5f, 0xb0, 0x9c, 0xa9, 0xa0, 0x51, 0x0b, 0xf5, 0x16, 0xeb, 0x7a, 0x75, 0x2c, 0xd7,
    0x4f, 0xae, 0xd5, 0xe9, 0xe6, 0xe7, 0xad, 0xe8, 0x74, 0xd6, 0xf4, 0xea, 0xa8, 0x50, 0x58, 0xaf
]


def display(grid) :
    for line in grid :
        for ce in line :
            if ce :
                print('██',end='')
            else :
                print('  ',end='')
        print()

def new_grid() :
    return [
    [1,1,1,1,1,1,1,0,1,2,2,2,2,0,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,1,0,0,2,2,2,2,0,1,0,0,0,0,0,1],
    [1,0,1,1,1,0,1,0,0,2,2,2,2,0,1,0,1,1,1,0,1],
    [1,0,1,1,1,0,1,0,1,2,2,2,2,0,1,0,1,1,1,0,1],
    [1,0,1,1,1,0,1,0,0,2,2,2,2,0,1,0,1,1,1,0,1],
    [1,0,0,0,0,0,1,0,0,2,2,2,2,0,1,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0],
    [0,0,1,0,1,1,1,0,1,2,2,2,2,1,0,0,0,1,0,0,1],
    [2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    [2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    [2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    [2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
    [0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,0,0,0,0,0,1,0,1,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,0,1,1,1,0,1,0,1,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,0,1,1,1,0,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,0,1,1,1,0,1,0,1,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,0,0,0,0,0,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2],
    [1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2] ]

def scan (grid) :
    size = len(grid)
    index, cycle = size - 1, 0
    path = []

    while index > 0 :
        if index == 6 : index = 5

        for i in range(size) :
            y = i if cycle % 2 else size - 1 - i

            for x in range(index,index-2,-1) :
                if grid[y][x] == 2 :
                    path.append([x,y])
        index -= 2
        cycle += 1

    return path

def create_qr_code(text) :
    pad = [ '11101100', '00010001' ]

    grid = new_grid()
    path = scan(grid)
    LOG, EXP = alphaTable, [0] * 255
    for i in range(255) : EXP[LOG[i]] = i
    # make data codewords
    bits = '0100'
    bits += format(len(text), '08b')

    for ch in text :
        bits += format((ord(ch)), '08b')

    for i in range(min(4, 72 - len(bits))) : # fill with zeros
        bits += '0'

    while len(bits) < 72 :
        for line in pad :
            bits += line

    bits = bits[:72]

    # make ecc codewords
    cycle = len(bits) // 8
    gen = [0,43,139,206,78,43,239,123,206,214,147,24,99,150,39,243,163,136]
    poly = [ int(bits[i * 8: i * 8 + 8], 2) for i in range(cycle) ]

    for _ in range(cycle) :
        poly = [EXP[(gen[i] + LOG[poly[0]]) % 255] ^ (poly[i] if i < len(poly) else 0) for i in range(len(gen))]
        while poly[0] == 0 : poly.pop(0)

    while len(poly) < 17 : poly.append(0)
    for exp in poly : # complete bits
        bits += format(exp, '08b')

    for [x,y] in path : # make the mask
        grid[y][x] = ((x + y) % 2) == 0

    for i in range(len(bits)) : # print all codewords
        [x,y] = path[i]
        grid[y][x] ^= int(bits[i])

    # display(grid)
    return grid

LOG, EXP = alphaTable, [0] * 256
for i in range(255) : EXP[LOG[i]] = i

gen = [0,43,139,206,78,43,239,123,206,214,147,24,99,150,39,243,163,136]
erc = [64 , 36 , 134 , 144 , 236 , 17 , 236 , 17 , 236]

erc = [EXP[(gen[i] + LOG[erc[0]]) % 255] ^ (erc[i] if i < len(erc) else 0) for i in range(len(gen))]
while erc[0] == 0 : erc.pop(0)

erc = (len(gen) - len(erc) - 1) * [0] + erc

print(erc)


# create_qr_code("Warrior")
# create_qr_code("k-%-")
# create_qr_code('sU&-/')
