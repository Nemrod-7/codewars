import time
start = time.time()

ones = [ ((1 << i) - 1) for i in range(50) ]

def checkcell(comb, x) :
    hist = [0,0]

    for curr in comb :
        hist[curr >> x&1] = True
        if hist[0] and hist[1] : break;

    if not hist[0] : return 1
    if not hist[1] : return 0
    return 2

def place (block, total) :
    if not block : return [0]
    if block[0] > total : return []

    starts = total - block[0] # starts = 2 means possible starting indexes are [0,1,2]

    if len(block) == 1 :
        return [ (ones[block[0]] << i) for i in range(starts + 1) ]
    else :
        ans,rest = [],block[1:]

        for i in range(total - block[0]) :
            for sol in  place(rest, starts-i-1) :
                ans.append( (ones[block[0]] << i) | (sol << (block[0] + i + 1)) )
    return ans

def solve(clues, width, height) :
    top, left = clues
    north = [ place(cell, height) for cell in top ]
    east = [ place(cell, width) for cell in left ]
    grid = [ [2 for _ in range(width)] for _ in range(height) ]
    # print('(',top,',', left,')')
    
    # for _ in range(20) :
    #     cnt = 0
    #     x_axis = sorted([ (len(north[i]), i) for i in range(width) ])
    #     y_axis = sorted([ (len(east[i]), i) for i in range(height) ])
    #     # print(x_axis)
    #     # print(y_axis)
    #     for _,y in y_axis :
    #         for _,x in x_axis :
    #             if grid[y][x] != 2 :
    #                 east[y] = [ comb for comb in east[y] if (comb >> x&1) == grid[y][x] ]
    #                 north[x] = [ comb for comb in north[x] if (comb >> y&1) == grid[y][x] ]
    #             else :
    #                 a = checkcell(north[x], y)
    #                 b = checkcell(east[y], x)
    #
    #                 if a != 2 : grid[y][x] = a
    #                 if b != 2 : grid[y][x] = b
    #                 cnt += 1
    #     if cnt == 0 : break
    return tuple(tuple(line) for line in grid )

def display(grid) :
    for line in grid :
        for cell in line :
            if cell == 0 : print('  ', end='')
            if cell == 1 : print('1 ', end='')
            if cell == 2 : print('. ', end='')
        print()

def gettest(clues) :
    grid = solve(clues, len(clues[0]), len(clues[1]))
    display(grid)

# v_clues = ((3,), (4,), (2, 2, 2), (2, 4, 2), (6,), (3,))
# h_clues = ((4,), (6,), (2, 2), (2, 2), (2,), (2,), (2,), (2,), (), (2,), (2,))
# gettest((v_clues, h_clues))
#
# clues = ( ((2, 2, 1, 3), (1, 2, 2, 1, 1, 1, 3), (3, 1, 5, 1), (5, 7, 2), (2, 4, 13), (3, 5, 6, 1, 5), (4, 1, 3, 3, 5), (1, 9, 3, 3), (1, 1, 1, 2, 1, 3, 3, 1), (1, 2, 1, 1, 5), (1, 1, 3, 1, 4, 1), (1, 1, 2, 1, 1, 1, 3, 1), (4, 4, 7), (4, 4, 3, 3), (6, 1, 1, 3, 4, 2), (8, 1, 1, 2, 2, 1), (4, 3, 1, 3, 2), (3, 7, 1, 1, 1), (2, 9, 1), (2, 10, 2, 1), (5, 13), (1, 12), (4, 1, 5, 2, 1, 2, 1, 2), (6, 3, 3, 4, 2), (1, 11, 4, 2)) , ((2, 2, 2, 6, 1), (2, 7, 3), (1, 1, 2, 4, 1, 2), (3, 2, 5, 1, 2), (7, 6, 3, 2), (5, 1, 8, 4), (2, 5, 8, 2), (1, 2, 1, 3, 1, 5, 1, 1), (1, 7, 3, 3), (1, 1, 1, 1, 4, 3), (3, 4, 1, 4, 3), (2, 2, 1, 1, 6, 1), (2, 3, 4, 1, 4, 1), (3, 3, 6), (4, 1, 3, 5), (7, 1, 3, 2, 1), (3, 4, 2, 3), (5, 2, 2, 3, 2), (3, 3, 6, 6), (6, 6, 5), (11, 2, 2), (9, 1, 3), (2, 6, 2, 1, 2), (2, 4, 3, 1, 3), (5, 1, 1, 6, 3, 3)) )
# gettest(clues)
#
# clues = ( ((4, 2, 5, 6), (2, 4, 2, 2, 2), (7, 11), (4, 2, 1, 4, 2), (6, 8, 1), (7, 2, 3), (3, 6, 1, 2), (1, 1, 2, 1, 4), (2, 4, 6), (2, 3, 1, 2, 4, 2), (3, 9, 1, 3, 1), (1, 1, 7, 6), (6, 3, 6), (2, 7, 2, 1, 5), (1, 3, 3, 1, 1, 6), (1, 3, 15), (3, 2, 7, 3), (7, 1, 3), (4, 3, 3, 4, 1), (2, 1, 2, 4, 3, 1), (3, 3, 3, 4), (3, 1, 8, 1, 2), (3, 2, 3, 10, 2), (4, 1, 3, 3, 1), (2, 1, 3, 1, 3)) , ((4, 2, 3, 3, 5), (7, 4, 1, 6), (1, 6, 1, 1, 5), (1, 4, 1, 2, 1), (1, 2, 1, 2, 1, 2), (5, 1, 4, 3, 1), (5, 3, 4, 3), (2, 3, 3, 3), (2, 8, 2), (3, 1, 3, 5), (3, 13, 1), (1, 1, 3, 9), (1, 5, 2, 1, 1, 1, 2, 1), (3, 3, 9, 3), (6, 5, 3, 3), (1, 3, 3, 5, 3), (5, 1, 4, 1, 1), (4, 1, 1, 5, 1, 2), (1, 2, 2, 4, 4), (1, 1, 1, 9, 3, 3), (1, 1, 8, 5), (5, 9, 4), (4, 3, 8, 1), (1, 6, 1, 3, 1, 1, 1), (1, 1, 1, 4, 3)) )
# gettest(clues)
#
# clues = ( ((1, 1, 1), (1, 3, 1, 3), (2, 2, 3, 1), (4, 3, 1, 2, 3), (3, 6, 2), (6, 2, 5, 2, 1), (4, 1, 7, 4, 1), (4, 1, 5, 6), (3, 2, 2, 4, 6, 1), (3, 5, 1, 1, 2), (7, 3, 4, 3, 1), (7, 2, 3, 2, 4, 1), (5, 1, 5, 10), (5, 2, 6, 1, 1), (1, 2, 4, 3, 4, 1), (2, 4, 1, 10), (8, 3, 8, 1), (3, 2, 4, 9), (3, 2, 4, 4, 1), (2, 9, 4, 1), (2, 2, 1, 6, 6), (4, 5, 1, 4), (2, 3, 2, 3), (1, 4, 8, 1), (2, 4, 1, 3, 1, 1)) , ((1, 7, 4), (8, 3), (2, 1, 9, 5, 2), (7, 5, 1, 3, 1), (5, 11), (4, 4, 1, 3), (1, 1, 8, 1, 2), (1, 2, 3, 6), (7, 2, 8), (3, 10, 1, 2), (1, 3, 1, 1, 2, 2), (1, 6, 2, 4, 1, 2), (7, 2, 2, 5), (4, 1, 6, 7), (3, 1, 2, 1, 10), (5, 1, 2, 7, 2), (3, 9, 2, 1), (1, 5, 7, 1, 3), (6, 7, 3), (2, 2, 3, 7, 1), (5, 1, 3, 6), (1, 3, 4, 6), (2, 1, 2, 1, 4), (3, 1, 1, 3), (1, 1, 1, 4, 6)) )
# gettest(clues)

clues = ( ((4,), (4,), (7, 4), (7, 4, 3), (10, 4, 3), (8, 4, 2), (1, 13, 2), (1, 3, 3, 1), (1, 13, 9, 2), (1, 13, 9, 2), (3, 9, 1, 4), (3, 13, 4, 2), (7, 6, 1, 2), (7, 16, 2), (7, 16, 2), (2, 2, 3, 2), (2, 12), (18, 8, 1), (7, 10, 8, 1), (7,), (14,), (14, 3), (14, 15), (2, 10, 4, 7), (2, 2, 6, 4, 4, 2), (6, 6, 4, 7), (14, 2, 3), (14, 7, 2), (5, 1, 3, 3), (5, 1, 1), (5, 8, 2), (8, 7, 4, 2), (8, 7, 2, 2), (8, 7), (4, 1)) , ((3,), (4, 3), (1, 3), (1, 12, 3), (2, 12, 3), (4, 7, 6, 3, 3), (4, 7, 6, 3, 3), (4, 7, 11, 3), (4, 2, 3, 11), (22, 2), (16, 4, 8), (13, 3, 14), (1, 4, 3, 14), (1, 4, 3, 15), (1, 4, 6, 15), (6, 6, 8, 4), (6, 2, 3, 8, 4), (6, 2, 3), (7, 8, 4), (7, 8, 4), (7, 8, 4, 1), (15, 4, 1), (2, 3, 2, 1, 1), (2, 3, 2, 1, 1), (2, 2, 2, 2, 2, 1, 1, 1), (2, 2, 2, 2, 1, 4, 1), (2, 4, 2, 2, 7, 2), (4, 2, 2, 7, 2), (2, 4, 2, 2, 4, 2), (2, 7, 2, 4, 2), (2, 2, 2, 2, 1), (2, 7), (5, 7, 3), (2, 5, 3), (2, 2)) )
gettest(clues)

end = time.time()
print( "elapsed : ", end - start)
